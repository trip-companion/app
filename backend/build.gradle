plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube' version '3.1.1'
}

group 'com.trip.companion'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    hash = 'git rev-parse --short HEAD'.execute().text.trim()
    jsonWebTokenVersion = '0.9.1'
    lombokVersion = '1.18.16'
    mongockVersion = '4.1.19'
    openApiUiVersion = '1.5.3'
    modelMapperVersion = '2.3.9'
    gsonVersion = '2.8.6'
    janinoVersion = '3.0.7'
    tikaVersion = '1.25'
    passayVersion = '1.6.0'
}

version = "0.0.1-${hash}"

dependencyManagement {
    imports {
        mavenBom("com.github.cloudyrock.mongock:mongock-bom:$mongockVersion")
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springdoc:springdoc-openapi-ui:${openApiUiVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    implementation 'com.github.cloudyrock.mongock:mongock-spring-v5'
    implementation 'com.github.cloudyrock.mongock:mongodb-springdata-v3-driver'
    testImplementation 'com.github.cloudyrock.mongock:mongock-standalone'

    implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "io.jsonwebtoken:jjwt:${jsonWebTokenVersion}"
    implementation 'javax.xml.bind:jaxb-api:2.1'
    implementation "org.codehaus.janino:janino:${janinoVersion}"
    implementation "org.apache.tika:tika-core:${tikaVersion}"
    implementation "org.passay:passay:${passayVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

task bootRunDev {
    bootRun.configure {
        systemProperty 'spring.profiles.active', 'dev'
    }
}

bootRunDev.finalizedBy bootRun

checkstyle {
    toolVersion '8.37'
    checkstyleTest.enabled = false
    configFile(new File('checkstyle.xml'))
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectKey", "trip-companion_app"
        property "sonar.organization", "trip-companion"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}